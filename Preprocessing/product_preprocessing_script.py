# -*- coding: utf-8 -*-
"""product_preprocessing_script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zy2rwjmYLMyewmdgH6N3WQyzR1oR0nOq
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install gdown

import pandas as pd
import re
import gdown

def download_files():
    file_ids = [
        ('13DRjfnsAAApz0H9NmFPMxsLQPJebQyBr', 'product_data.csv')
    ]
    for file_id, destination in file_ids:
        gdown.download(f'https://drive.google.com/uc?id={file_id}', destination, quiet=False)

def load_data():
    df = pd.read_csv('product_data.csv')
    return df

def extract_price_info(row, attribute):
    """
    Extracts price information based on the given attribute from the price column.
    """
    if pd.notna(row['price']):
        price_list = eval(row['price'])  # Convert string representation of list to actual list
        if price_list:  # Check if the list is not empty
            return price_list[0].get(attribute)
    return None

def add_price_columns(df):
    """
    Adds new columns for price attributes.
    """
    df['price_value'] = df.apply(lambda row: extract_price_info(row, 'value'), axis=1)
    df['price_currency'] = df.apply(lambda row: extract_price_info(row, 'currency'), axis=1)
    df['is_original'] = df.apply(lambda row: extract_price_info(row, 'is_original'), axis=1)
    df['valid_from'] = df.apply(lambda row: extract_price_info(row, 'valid_from'), axis=1)
    df['valid_to'] = df.apply(lambda row: extract_price_info(row, 'valid_to'), axis=1)
    return df

def extract_feature(row, feature):
    """
    Extracts a specific feature from the other_attributes column.
    """
    pattern = re.compile(r"'([^']*)' ?: ?('[^']*'|[^,}]+)")
    if pd.notna(row['other_attributes']):
        other_attributes_str = row['other_attributes']
        matches = re.findall(pattern, other_attributes_str)
        for key, value in matches:
            if key.strip() == feature:
                # Remove quotes if present
                if value.startswith("'") and value.endswith("'"):
                    value = value[1:-1]
                return value
    return None

def add_other_attributes_columns(df):
    """
    Adds new columns for attributes extracted from the other_attributes column.
    """
    df['ID'] = df.apply(lambda row: extract_feature(row, '_id'), axis=1)
    df['sku'] = df.apply(lambda row: extract_feature(row, 'sku'), axis=1)
    df['Product_URL'] = df.apply(lambda row: extract_feature(row, 'Product_URL'), axis=1)
    df['All_Reviews_Rating'] = df.apply(lambda row: extract_feature(row, 'All_Reviews_Rating'), axis=1)
    df['All_Reviews_Count'] = df.apply(lambda row: extract_feature(row, 'All_Reviews_Count'), axis=1)
    df['Color'] = df.apply(lambda row: extract_feature(row, 'Name'), axis=1)
    df['Images'] = df.apply(lambda row: extract_feature(row, 'Images'), axis=1)
    df['CM_product_measurements'] = df.apply(lambda row: extract_feature(row, 'CM_product_measurements'), axis=1)
    df['Availability'] = df.apply(lambda row: extract_feature(row, 'Availability'), axis=1)
    df['All-Care'] = df.apply(lambda row: extract_feature(row, 'All-Care'), axis=1)
    df['Original_Description'] = df.apply(lambda row: extract_feature(row, 'Original_Description'), axis=1)
    return df

def extract_hexadecimal(object_id_string):
    """
    Extracts the hexadecimal part from the object ID string.
    """
    return object_id_string.split("(")[1].split(")")[0].strip("'")

def clean_data(df):
    """
    Cleans the DataFrame by adding new columns and processing the data.
    """
    df = add_price_columns(df)
    df = add_other_attributes_columns(df)

    # Apply the function to the 'ID' column to extract hexadecimal part
    df['ID'] = df['ID'].apply(lambda x: extract_hexadecimal(x) if pd.notna(x) else x)

    # Drop unnecessary column
    if 'Unnamed: 0' in df.columns:
        df.drop(['Unnamed: 0'], inplace=True, axis=1)

    return df

def save_data(df, file_path):
    """
    Saves the DataFrame to a CSV file at the specified file path.
    """
    df.to_csv(file_path, index=False)

def main():
    file_id = '13DRjfnsAAApz0H9NmFPMxsLQPJebQyBr'
    # input_file_path = '/content/drive/MyDrive/Alex-Branch/products_full_data_.csv'
    output_file_path = '/content/drive/MyDrive/Cleaning_Product_FullData.csv'

    # Download the data
    download_files()

    # Read, clean, and save the data
    df = load_data()
    df = clean_data(df)
    save_data(df, output_file_path)

    # print("Data cleaning complete. Cleaned data saved to:", output_file_path)
    # print("Data size:", df.shape)
    # print(df.describe())
    # print(df.info())
    # print(df.head())

if __name__ == "__main__":
    main()

